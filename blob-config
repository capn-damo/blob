#!/bin/bash
#
# blob-config: script to save or restore openbox gui configurations
#
# written for BunsenLabs by <damo> May 2015
#
# Save options are for  Conky(s)
#                       Tint2(s)
#                       Openbox theme
#                       GTK theme
#                       Background (uses Nitrogen or feh, depending which
#                                   has the newer saved bg config file)
#                       Lightdm login gtk greeter 
#                       Screenshot (Windows are hidden briefly so the image
#                                   is the bare desktop, with any Tint2s 
#                                   or Conkys which are running)
#
#### VARIABLES #########################################################
CONFIGPATH="$HOME/.config/blob"
SETTINGS=""
TEMPFILE="$HOME/tempfile.tmp"
OBPATH="$HOME/.config/openbox"
THEMEINFO=""
CONFIGDIR=""
SCROT=0
CZEN=0
TZEN=0
### CONFIGS VARIABLES
FEHFILE="$HOME/.fehbg"
NITRODIR="$HOME/.config/nitrogen"
NITROFILE="$NITRODIR/bg-saved.cfg"
CONKYPATH="$HOME/.config/conky"
CONKYSESSION="$CONKYPATH/conky-sessionfile"
TINTSESSION="$HOME/.config/tint2/tint2-sessionfile"
GTK2=".gtkrc-2.0"
GTK2MINE=".gtkrc-2.0.mine"
GTK3="$HOME/.config/gtk-3.0"
GTK3x="$HOME/.config/xfce4/xfconf/xfce-perchannel-xml/xfce4-notifyd.xml"
LDM="/etc/lightdm/lightdm-gtk-greeter.conf"
### END CONFIGS VARIABLES

### DIALOG VARIABLES
TITLE="blOB Configuration Manager"
DASHES="------------------------------------------------------------------------"
PICKOBCFGS="OB menu.xml rc.xml autostart"
PICKOB="OB theme"
PICKGTK="GTK theme"
PICKCONKY="Conky"
PICKTINT="Tint2"
PICKBG="Background Wallpaper"
PICKLDM="Lightdm Login theme"
PICKSCROT="Save screenshot"
### END DIALOG VARIABLES

#### END VARIABLES #####################################################

### FUNCTIONS ##########################################################

setName(){  # set name of collection, make dir and session settings file
    MSG="Configurations will be saved to a new directory in\n$CONFIGPATH\n\nEnter name of new collection..."
    while [ 1 ];do  # loop dialog if nothing is selected
        ANS=$(zenity --entry --title "$TITLE" --text "$MSG") 
        if [[ $? == 1 ]];then # Cancel was selected
            exit 0
        else
            if [ -z $ANS ];then     # entry was empty
                zenity --error --text="No file specified for new saved session.\nTry again..."
                echo "No name entered for new collection!" 2>&1
                continue
            else
                CONFIGDIR="$CONFIGPATH/$ANS" 
                if [ -d "$CONFIGDIR" ];then
                    echo "$CONFIGDIR already exists"
                    zenity --question --title "$TITLE" \
                    --text "Overwrite existing saved session?" \
                    --width=300
                    if [[ $? = 0 ]];then
                        rm -rf "$CONFIGDIR" && mkdir -p "$CONFIGDIR"
                        SETTINGS="$CONFIGDIR/settings.cfg"
                        > "$SETTINGS"
                        break
                    else
                        continue
                    fi
                fi
                mkdir -p "$CONFIGDIR"
                SETTINGS="$CONFIGDIR/settings.cfg"
                > "$SETTINGS"
                echo "Configuration saved as: $ANS"
            fi
            break
        fi
    done
    THEMEINFO="$CONFIGDIR/saved-themes.txt"
    > "$THEMEINFO"
    TIME=$(date)
    echo -e "Theme: $ANS\nSaved on $TIME\n$DASHES" >> "$THEMEINFO"
}

getBg(){    # find if feh or nitrogen was used. Save config file(s)
    if [ -e "$NITROFILE" ] && [ -e "$FEHFILE" ];then  # see which was last used to set background
        if [ "$NITROFILE" -nt "$FEHFILE" ];then # use most recent method 
            BGSET="NITROGEN"
        else
            BGSET="FEH"
        fi
    elif [ -e "$FEHFILE" ] && ! [ -e "$NITROFILE" ];then  # use feh for background
        BGSET="FEH" 
    elif [ -e "$NITROFILE" ] && ! [ -e "$FEHFILE" ];then    # use nitrogen for background
        BGSET="NITROGEN"
    else
        echo "No background-setting application found" 2>&1
        BGSET="None"
    fi
    echo "Background to be set with $BGSET"
    
    case "$BGSET" in
        FEH     )   echo "[BACKGROUND] $BGSET" >> "$SETTINGS"
                    cp "$FEHFILE" "$CONFIGDIR"
                    echo "$FEHFILE copied"
                    bgFeh
                    ;;
        NITROGEN)   echo "[BACKGROUND] $BGSET" >> "$SETTINGS"
                    cp "$NITRODIR/nitrogen.cfg" "$CONFIGDIR"
                    cp "$NITROFILE" "$CONFIGDIR"
                    echo "Nitrogen file copied"
                    getNitrogen
                    ;;
        None    )   echo "No background-setting application found" 2>&1
                    echo "[BACKGROUND] $BGSET" >> "$SETTINGS"
                    ;;
        *       )   echo "ERROR: No background config found" 2>&1
                    exit 1
                    ;;
    esac
}

bgFeh(){    # get Feh saved backgrounds
    FFILE="$CONFIGDIR/.fehbg"
    if [ -f "$FFILE" ];then
        BG=""
        # get fields between single quotes
        for F in $(grep -o "'.*'" $FFILE | sed "s/'//g");do
            BG="$BG$F;\n"
        done
        TXT="Backgrounds set with Feh, using $FEHFILE\n\n$BG"
        echo -e "$TXT$DASHES" >> "$THEMEINFO"
    else
        echo "$FFILE not found" 2>&1
    fi
}

getNitrogen(){  # get Nitrogen saved backgrounds
    NFILE="$CONFIGDIR/bg-saved.cfg"
    if [ -f $NFILE ];then
        BG=""
        while read line;do
            BGLINE=$(echo $line | awk -F"file=" '{print $2}')
            if [[ $BGLINE ]];then
                BG="$BG$BGLINE;\n"
            fi
        done < $NFILE
        TXT="Backgrounds set with Nitrogen, using $NITROFILE\n\n$BG"
        echo -e "$TXT$DASHES" >> "$THEMEINFO"
    else
        echo "$NFILE not found" 2>&1
    fi
}

getConky(){
    MSG="Use running conkys?\nIf 'No', then the default conkyrc will be used"
    zenity --question --title "$TITLE" --text "$MSG" --width=300
    if [[ $? = 0 ]];then
        echo "Using running conkys"
        conkyRunning
        echo "[CONKY] $CONKYCMD" >> "$SETTINGS"
    else
        echo "Using default conky"
        echo "[CONKY] conky -c $HOME/.conkyrc;" >> "$SETTINGS"
    fi
}

conkyRunning(){    # find running conkys
    > "$TEMPFILE" # make blank tempfile, to save running conky paths
    if [ "$(pidof conky)" ];then
        # test if default conky was started
        for ARG in $(ps aux | grep  [c]onky | awk '{print $(NF-1)}');do
            if [[ $ARG = "conky" ]]; then
                echo "$HOME/.conkyrc" >> "$TEMPFILE"  # 'conky -q' probably used
            else                            # send conky filepath to tempfile
                for ARG in $(ps aux | grep  [c]onkyrc | awk '{print $(NF)}');do
                    if [[ $ARG != "-q" ]];then
                        echo "$ARG" >> "$TEMPFILE"
                    fi
                done
            fi
        done
    fi
    
    CONKYCMD=""
    # remove any duplicates in tempfile
    TEMP2="$HOME/tempfile2.tmp"
    awk '!x[$0]++' "$TEMPFILE" > "$TEMP2" && mv "$TEMP2" "$TEMPFILE"
    
    TEMP3="$HOME/tempfile3.tmp" # tempfile for saved-themes.txt
    > "$TEMP3"
    while read line;do
        if [[ $line = "-q" ]];then
            CONKYCMD="$CONKYCMD""conky -c $HOME/.conkyrc & sleep 1s;"
            echo "$HOME/.conkyrc;" >> "$TEMP3"
        else
            CONKYCMD="$CONKYCMD""conky -c $line & sleep 1s;"
            echo "$line;" >> "$TEMP3"
        fi
    done    < "$TEMPFILE"
    rm "$TEMPFILE"
    writeConkys
}

writeConkys(){  # save conky names to saved-themes.txt
    TXT="Conkys:\n\n"
    while read line;do
        TXT="$TXT$line\n"
    done < "$TEMP3"
    echo -e "$TXT$DASHES" >> "$THEMEINFO"
    rm "$TEMP3"
}

checkConkyzen(){    # see if bl-conkyzen and session file present
    if type bl-conkyzen &>/dev/null;then
        if [ -f $CONKYSESSION ]; then
            CZEN=1  # set flag for Restore choice
        fi
    fi
}

getTint(){
    MSG="Use running Tint2?\nIf 'No', then the default tint2rc will be used"
    zenity --question --title "$TITLE" --text "$MSG" --width=300
    if [[ $? = 0 ]];then
        echo "Using running tint2s"
        tintRunning
        echo "[TINT2] $TINTCMD" >> "$SETTINGS"
    else
        echo "Using default tint2"
        echo "[TINT2] tint2 -c $HOME/.config/tint2/tint2rc & sleep 0.1s;" >> "$SETTINGS"
    fi
}

tintRunning(){
    > "$TEMPFILE" # make blank tempfile, to save running tint2 paths
    if [ "$(pidof tint2)" ];then
        ps aux | grep [t]int2 | awk '{print $NF}' >> "$TEMPFILE"
    fi
    TINTCMD=""
    TEMP3="$HOME/tempfile3.tmp" # tempfile for saved-themes.txt
    while read line;do
        if [[ $line = "tint2" ]];then  # default tint2 was started with command "tint2"
            TINTCMD="$TINTCMD""tint2 -c $HOME/.config/tint2/tint2rc & sleep 1s;"
            echo "tint2/tint2rc;" >> "$TEMP3"
        else
            TINTCMD="$TINTCMD""tint2 -c $line & sleep 1s;"
            echo "$line;" >> "$TEMP3"
        fi
    done    < "$TEMPFILE"
    rm "$TEMPFILE"
    writeTint2s
}

writeTint2s(){  # save tint2 names to saved-themes.txt
    TXT="Tint2s:\n\n"
    while read line;do
        TXT="$TXT$line\n"
    done < "$TEMP3"
    echo -e "$TXT$DASHES" >> "$THEMEINFO"
    rm "$TEMP3"
}

checkTint2zen(){    # see if bl-tint2zen and session file present
    if type bl-tint2zen &>/dev/null;then
        if [ -f $TINTSESSION ]; then
            TZEN=1  # set flag for Restore choice
        fi
    fi
}

getOBtheme(){   # copy <theme> section from rc.xml to obtheme.txt
    RCFILE="$OBPATH/rc.xml"
    tag="theme"
    sed -n "/<$tag>/,/<\/$tag>/p" "$RCFILE" > "$CONFIGDIR/obtheme.txt"
    echo "[OBTHEME]" >> "$SETTINGS"
    getOBname
}

getOBname(){    # get OB theme name
    OBFILE="$CONFIGDIR/obtheme.txt"
    OBTHEME=$(awk 'NR==2 {print;exit}' $OBFILE | awk -F'[>|<]' '{print $3}')
    TXT="Openbox theme:  $OBTHEME\n"
    echo -e "$TXT$DASHES" >> "$THEMEINFO"
    echo "Saved Openbox theme: $OBTHEME"

}
getGTKtheme(){
    GTKTHEMES=( "$GTK2" "$GTK2MINE" "$GTK3" "$GTK3x" )
    for f in "${GTKTHEMES[@]}";do
        if [ -f "$f" ];then
            cp "$f" "$CONFIGDIR"
        elif [ -d "$f" ];then
            cp -r "$f" "$CONFIGDIR"
        fi
    done
    echo "[GTK]" >> "$SETTINGS"
    getGTKname
}

getGTKname(){   # get GTK theme name
    GTKFILE="$CONFIGDIR/.gtkrc-2.0"
    while read line;do
        if [ $(echo $line | grep "gtk-theme-name" ) ];then
            GTKTHEME=$(echo $line | awk -F '"' '{print $2}')
        fi
    done < $GTKFILE
    TXT="GTK theme:  $GTKTHEME\n"
    echo -e "$TXT$DASHES" >> "$THEMEINFO"
    echo "Saved GTK theme: $GTKTHEME"
    
}

getLightdm(){
    if [ -e "$LDM" ];then
        cp "$LDM" "$CONFIGDIR"
        echo "Saved Lightdm: $LDM"
        echo "[LIGHTDM]" >> "$SETTINGS"
        TXT="Lightdm configuration:  $LDM\n"
        echo -e "$TXT$DASHES" >> "$THEMEINFO"
    fi
}

getScrot(){
    TEMP=$CONFIGPATH/temp.tmp
    IMG="$CONFIGPATH/$ANS.png" # NB 'scrot' is sensitive to quoting

    # get current desktop number
    CURRDTOP=$(xprop -root _NET_CURRENT_DESKTOP | tail -c -2)
    wmctrl -l -x > $TEMP    # store window list in tempfile
    wmctrl -k on #&& sleep 0.2s  # show desktop with delay
    
    # show any conkys which have been hidden by wmctrl, for the scrot
    for CONK in $(xdotool search --classname "Conky");do 
        xdotool windowactivate $CONK 
    done
    sleep 0.5s && scrot $IMG && mogrify -resize 50%  $IMG    # make scrot

    while read line; do
        WINDOW=$(echo $line | awk '{print $1}') # Window_ID is first field
        DTOP=$(echo $line | awk '{print $2}' )  # Desktop number is second field
        if [[ $DTOP = $CURRDTOP ]];then
            xdotool windowactivate "$WINDOW" 
        fi
    done < $TEMP
    rm $TEMP
    echo "Screenshot saved as $ANS.png"
}

restoreGTK(){
    SAVEPATH="$1"
    GTKPATHS=( "$HOME" "$HOME" "$GTK3" "$GTK3x" )
    GTKSAVED=( "$1/$GTK2" "$1/$GTK2MINE" "$1/gtk-3.0" "$1/xfce4-notifyd.xml" )
    i=0
    for f in ${GTKSAVED[@]};do
        if [ -e "$f" ];then     # if destination exists
            if [ -e "${GTKPATHS[i]}" ];then
                if [[ ${GTKSAVED[i]} == "$1/gtk-3.0" ]];then
                    cp ${GTKSAVED[i]}/* ${GTKPATHS[i]} # restore contents of gtk-3.0
                fi
                cp ${GTKSAVED[i]} ${GTKPATHS[i]}
            else
                echo "Restore path ${GTKPATHS[i]} not found" 2>&1
            fi
        else
            echo "${GTKSAVED[i]} not found" 2>&1
        fi
        i=$(($i+1))
    done
}

restoreOBrc(){
    RCFILE="$OBPATH/rc.xml" 
    THEMEFILE="$1/obtheme.txt"
    FTEMP="$1/temp.txt"

    if [[ $(grep "[OBTHEME]" "$1/settings.cfg" ) ]];then
        # backup rc.xml first
        NOW=$(date +"%Y%m%d-%H%M")
        RCBKP="$RCFILE.$NOW"
        cp "$RCFILE" "$RCBKP"
        
        ## put placeholder in place of <theme> section, write to tempfile
        sed -n "/<theme>/{:a;N;/<\/theme>/!ba;N;s/.*\n/THEMESECTION\n/};p" "$RCFILE" > $FTEMP
        # replace placeholder from theme file
        sed -i "/THEMESECTION/{
            s/THEMESECTION//g
            r $THEMEFILE
        }" $FTEMP
        sed -i '/^$/d' $FTEMP   # remove empty lines
        cp $FTEMP "$RCFILE"     # overwrite rc.xml
        rm $FTEMP
    fi
}

restoreLightdm(){   # need sudo to restore lightdm-gtk-greeter
    CMD="sudo cp $1 $LDM"
    TXT="Authenticate restore of lightdm-gtk-greeter"
    
    if type xdpyinfo &>/dev/null;then   # check xdpyinfo exists
        SCREENDIMS=$(xdpyinfo | awk '/dimensions/ {print $2}')
        # centre terminal on screen, for sudo password
        LEFT=$(echo $SCREENDIMS | awk -F"x" '{print $1}')
        LEFT=$(($LEFT/2-246))
        TOP=$(echo $SCREENDIMS | awk -F"x" '{print $2}')
        TOP=$(($TOP/2-36))
        GEOM="-geometry 70x5+$LEFT+$TOP"
        GEOM_GNOME="--geometry 70x5+$LEFT+$TOP"
        GEOM_TERMINATOR="--geometry 492x72+$LEFT+$TOP"
    else
        GEOM="-geometry 70x5"
        GEOM_GNOME="--geometry 70x5"
        GEOM_TERMINATOR="--geometry 492x72"
    fi
    # get x-terminal-emulator in use
    TERMINAL=$(update-alternatives --query x-terminal-emulator | awk -F/ '/^Value/ {print $NF}')
    
    case $TERMINAL in
        gnome-terminal.wrapper  ) gnome-terminal $GEOM_GNOME -e "$CMD";;
        terminator              ) terminator $GEOM_TERMINATOR -T "$TXT" --command "$CMD";;
        *                       ) x-terminal-emulator $GEOM -T "$TXT" -e "$CMD";;
    esac
}

saveSettings(){
    COLUMNS=(\
    "FALSE" "$PICKOB" \
    "FALSE" "$PICKGTK" \
    "FALSE" "$PICKCONKY" \
    "FALSE" "$PICKTINT" \
    "FALSE" "$PICKBG" \
    "FALSE" "$PICKLDM"
    "FALSE" "$PICKSCROT"\
    )
    
    CHOICE=$(zenity --list --checklist --title "$TITLE" \
    --text "Choose the configs you want to save..." \
    --width=340 --height=300 \
    --column "Select" --column "Config" --separator=":" "${COLUMNS[@]}")
    
    if [[ $? = 1 ]]; then # cancel button pressed
        exit 0
    else
        if [ -z "$CHOICE" ]; then # entry field is empty, so exit
            zenity --info --title "$TITLE" \
            --text "No selections made\n\nExiting...." --width=300
            exit 0
        else
            i=0
            OIFS=$IFS # save Internal Field Separator
            IFS=":" # separator is ":" in returned choices
            for ret in $CHOICE; do
                retChoice[$i]="$ret"
                i=$(($i+1))
            done
            IFS=$OIFS # reset IFS back to default
            len=${#retChoice[@]}
            for (( i=0; i<${len}; i++ ));do
                item="${retChoice[$i-1]}"
                case "$item" in
                    "$PICKOB"   )   getOBtheme
                                    ;;
                    "$PICKGTK"  )   getGTKtheme
                                    ;;
                    "$PICKCONKY")   getConky
                                    ;;
                    "$PICKTINT" )   getTint
                                    ;;
                    "$PICKBG"   )   getBg
                                    ;;
                    "$PICKLDM"  )   getLightdm
                                    ;;
                    "$PICKSCROT")   SCROT=1
                                    ;;
                    *           )   echo "Unknown value!" 2>&1
                                    exit 1
                                    ;;
                esac
            done
        fi
    fi
}

restoreSettings(){
    i=0
    for dir in "$CONFIGPATH"/* ;do
        if [ -d "$dir" ];then
            if [ -e "$dir/settings.cfg" ];then
                settingsARR[$i]="$dir"
            fi
        fi
        i=$(($i+1))
    done
    
    opt="FALSE"
    VIEWSAVED="View_Saved_Settings"
    LIST1="$opt $VIEWSAVED"
    for ((j=0; j<${#settingsARR[*]}; j++));do
        LIST="$LIST $opt ${settingsARR[j]}"
    done
    LISTALL="$LIST1 $LIST"

    # Display dialogs to view or restore configs
    LOOP=1
    while [[ $LOOP = 1 ]];do
        txt="Choose the configs you want to restore"
        RET=$(showThemeZen "$txt" "$LISTALL")
        if [[ $? = 1 ]];then    # Cancel
            exit 0
        fi
        if ! [[ -z $RET ]];then
            if [[ $RET = $VIEWSAVED ]];then
                viewThemes "$LIST" # display saved-themes details
            else
                SETCFG="$RET/settings.cfg"
                LOOP=0
            fi
        else
            zenity --error  --title "$TITLE" \
            --text="No choice made!" \
            --width=340
        fi
    done
    # Get chosen saved configs and restore them
    while read line;do
        TAG=$(echo $line | awk '{print $1}')
        VAL=$(echo $line | awk '{print $2}')
        case "$TAG" in
            "[TINT2]"       )   checkTint2zen # see if bl-tint2zen installed
                                if [[ $TZEN ]];then
                                    > "$TINTSESSION" # overwrite tint2 session file
                                fi
                                TINTCMD=$(echo $line | cut -d ' ' -f2-)
                                echo $TINTCMD | awk -F';' '{for(i=1; i<=NF; i++) print $i}' >> "$TINTSESSION" # write to tint2 session file
                                killall tint2; eval "$TINTCMD"
                                exit 0
                                ;;
            "[CONKY]"       )   checkConkyzen # see if bl-conkyzen installed
                                if [[ $CZEN ]];then
                                    > "$CONKYSESSION" # overwrite conky session file
                                fi
                                CONKYCMD=$(echo $line | cut -d ' ' -f2-)
                                echo $CONKYCMD | awk -F';' '{for(i=1; i<=NF; i++) print $i}' >> "$CONKYSESSION" # write to conky session file
                                killall conky; eval "$CONKYCMD"
                                exit 0
                                ;;
            "[GTK]"         )   restoreGTK "$RET"
                                ;;
            "[OBTHEME]"     )   restoreOBrc "$RET"
                                ;;
            "[BACKGROUND]"  )   if [[ $VAL = "FEH" ]];then
                                    cp "$RET/.fehbg" "$HOME"
                                    eval $(cat ~/.fehbg)
                                else
                                    cp "$RET/bg-saved.cfg" "$NITRODIR"
                                    (sleep 1s && nitrogen --restore) & 
                                fi
                                ;;
            "[LIGHTDM]"     )   restoreLightdm "$RET/lightdm-gtk-greeter.conf"
                                ;;
            *               )   echo "Unknown value!" 2>&1
                                exit 1
                                ;;
        esac
    done < "$SETCFG"
}

function reloadGTK(){ # reload gtk theme after restoring saved config
python - <<END
import gtk

events=gtk.gdk.Event(gtk.gdk.CLIENT_EVENT)
data=gtk.gdk.atom_intern("_GTK_READ_RCFILES", False)
events.data_format=8
events.send_event=True
events.message_type=data
events.send_clientmessage_toall()
    
END
}

viewThemes(){   # display saved themes details
    LOOP=1
    while [[ $LOOP = 1 ]];do
        txt="View saved configs details?"
        VIEW=$(showThemeZen "$txt" "$LIST")
        if [[ $? = 1 ]];then
            break
        elif ! [ -z $VIEW ];then
            SAVED="$VIEW/saved-themes.txt"
            
            zenity --text-info --title "$TITLE" \
            --filename="$SAVED" \
            --width=600 --height=600
        else
            LOOP=0
        fi
    done
}

showThemeZen(){ # display list dialog
    zenity --list  --title "$TITLE" \
    --text="$1" \
    --width=340 --height=270 \
    --radiolist \
    --column "Pick" \
    --column "Saved" $2 
}

### END FUNCTIONS ######################################################

# test for blob config directory, create if it doesn't exist
mkdir -p "$CONFIGPATH"


# Choose Save or Restore
zenity --question  --title "$TITLE" \
--text "Save or Restore Openbox configuration" \
--ok-label "Save" \
--cancel-label "Restore"

if [[ $? = 0 ]]; then # Save button pressed
    setName
    saveSettings
    if [[ $SCROT = 1 ]];then # scrot needs to be done last
        getScrot 
    fi
else
    restoreSettings
    openbox --reconfigure 
    reloadGTK
fi

exit 0
