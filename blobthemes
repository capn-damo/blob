#!/bin/bash
#
# blobthemes: script to save or restore openbox gui configurations
#
# (Requires yad, imagemagick, wmctrl, xdotool, xrandr, nitrogen|feh)
#
# Written for BunsenLabs by damo <damo@bunsenlabs.org> October 2015
#
# Save options are for  Conky(s)
#                       Tint2(s)
#                       Openbox theme
#                       GTK theme
#                       Background (uses Nitrogen or feh, depending which
#                                   has the newer saved bg config file)
#                       Alt Menu (dmenu)
#                       Lightdm login gtk greeter
# 
# A Screenshot is saved (Windows are hidden briefly so the image
#                        is the bare desktop, with any Tint2s 
#                        or Conkys which are running)
#
# The dialog icon is "Bunsenlabs-flame-small.svg" - adjust the filepath
# to wherever it is stored ("IMGPATH" variable)
#
# xdotool is used to move the mouse pointer, and assumes Rclick is "click 3".
# If you have the right button set to something else, then adjust the 
# "MOUSECMD" variable
#
#### VARIABLES #########################################################
CONFIGPATH="$HOME/.config/blob"
SETTINGS=""
TEMPFILE="$HOME/tempfile.tmp"
OBPATH="$HOME/.config/openbox"
CONFIGDIR=""
SCROT=0
CZEN=0
TZEN=0
CONKYCMD=""
### CONFIGS VARIABLES
FEHFILE="$HOME/.fehbg"
NITRODIR="$HOME/.config/nitrogen"
NITROFILE="$NITRODIR/bg-saved.cfg"
CONKYPATH="$HOME/.config/conky"
CONKYSESSION="$CONKYPATH/conky-sessionfile"
TINTSESSION="$HOME/.config/tint2/tint2-sessionfile"
GTK2=".gtkrc-2.0"
GTK2MINE=".gtkrc-2.0.mine"
GTK3="$HOME/.config/gtk-3.0"
GTK3x="$HOME/.config/xfce4/xfconf/xfce-perchannel-xml/xfce4-notifyd.xml"
LDM="/etc/lightdm/lightdm-gtk-greeter.conf"
DPATH="$HOME/.config/dmenu/dmenu-bind.sh"
PICKOBCFGS="OB menu.xml rc.xml autostart"
PICKOB="OB theme"
PICKGTK="GTK theme"
PICKCONKY="Conky"
PICKTINT="Tint2"
PICKBG="Background Wallpaper"
PICKDMENU="dmenu (Alt menu)"
PICKLDM="Lightdm Login theme"
PICKSCROT="Save screenshot"
### END CONFIGS VARIABLES

### DIALOG VARIABLES
DIALOG="yad --center --undecorated --borders=20"
IMG="--image="
IMGPATH="Bunsenlabs-flame-small.svg"
T="--text="
OK="--button=gtk-ok:0"
CANCEL="--button=gtk-cancel:1"
EXIT="--button=gtk-quit:1"
TXTINTRO="\n\n<big><b>BunsenLabs\n\nOpenbox Configuration Manager</b></big>\n\n\n \
<b>Save or Restore settings for:</b>\n\n \
\t\tOpenbox theme\n \
\t\tGTK theme\n \
\t\tConkys\n \
\t\tTint2\n \
\t\tDesktop Background\n \
\t\tAlt Menu (dmenu)\n \
\t\tLightDM theme\n \
\t\tSave screenshot"
### END DIALOG VARIABLES

### USER OB ACTIONS
MOUSECMD="click 3"      #   R-click (show root-menu)

#### END VARIABLES #####################################################

### FUNCTIONS ##########################################################

function setName(){  # set name of collection, make dir and session settings file
    
    MSG="  Configurations will be saved to a new directory in  \
    \n  $CONFIGPATH\n\n  Enter name of new collection...  "
    MSG2="  No file specified for new saved session.\n\n  Try again?"
    LOOP=1
    DEL=0
    while [[ $LOOP ]];do  # loop dialog if nothing is selected
        ANS=$($DIALOG --entry \
            $CANCEL $OK \
            "$T$MSG" 
            )
        if [[ $? = 1 ]] ;then # Cancel was selected
            exit 0
        else
            if [[ ! $ANS ]] ;then     # entry was empty
                $DIALOG --image="dialog-question" \
                "$CANCEL" "$OK" \
                "$T$MSG2"
                
                RET=$?
                echo "  No name entered for new collection!" 2>&1
                if [[ $RET = 0 ]];then
                    continue
                else
                    exit 0
                fi
            else
                ANS=$(echo $ANS | sed -e 's/ /_/g')    # replace any spaces in dir name
                CONFIGDIR="$CONFIGPATH/$ANS" 
                if [ -d "$CONFIGDIR" ];then
                    echo "  $CONFIGDIR already exists"
                    
                    $DIALOG --form --image="dialog-question" \
                    --text="Overwrite existing saved session?" \
                    "$CANCEL" "$OK" \
                    --width=300 
                    
                    if [[ $? = 0 ]];then
                        mv {"$CONFIGDIR","$CONFIGDIR-BKP"} && mkdir -p "$CONFIGDIR"
                        DEL=1
                        SETTINGS="$CONFIGDIR/settings.cfg"
                        > "$SETTINGS"
                        break
                    else
                        continue
                    fi
                fi
                mkdir -p "$CONFIGDIR"
                SETTINGS="$CONFIGDIR/settings.cfg"
                > "$SETTINGS"
            fi
            break
        fi
    done

    TIME=$(date)
    if [[ $DEL = 1 ]];then
        TXT="  (Existing session overwritten)"
    fi
    echo "  Configuration will be saved as: $ANS $TXT"
    
    # Store list in listfile
    LISTMSG="$CONFIGDIR/LISTMSG.txt"
    echo "Configuration name: <b>$ANS</b>\t$TXT\nSaved at $TIME\n" > "$LISTMSG"
}

function getBg(){    # find if feh or nitrogen was used. Save config file(s)
    
    if [ -e "$NITROFILE" ] && [ -e "$FEHFILE" ];then  # see which was last used to set background
        if [ "$NITROFILE" -nt "$FEHFILE" ];then # use most recent method 
            BGSET="NITROGEN"
        else
            BGSET="FEH"
        fi
    elif [ -e "$FEHFILE" ] && ! [ -e "$NITROFILE" ];then  # use feh for background
        BGSET="FEH" 
    elif [ -e "$NITROFILE" ] && ! [ -e "$FEHFILE" ];then    # use nitrogen for background
        BGSET="NITROGEN"
    else
        echo "  No background-setting application found" 2>&1
        BGSET="None"
    fi
    echo "  Background to be set with $BGSET"
    
    case "$BGSET" in
        FEH     )   echo "[BACKGROUND] $BGSET" >> "$SETTINGS"
                    cp "$FEHFILE" "$CONFIGDIR"
                    echo "  $FEHFILE copied"
                    bgFeh
                    ;;
        NITROGEN)   echo "[BACKGROUND] $BGSET" >> "$SETTINGS"
                    cp "$NITRODIR/nitrogen.cfg" "$CONFIGDIR"
                    cp "$NITROFILE" "$CONFIGDIR"
                    echo "  Saved Nitrogen file: $NITROFILE"
                    getNitrogen
                    ;;
        None    )   echo "  No background-setting application found" 2>&1
                    echo "[BACKGROUND] $BGSET" >> "$SETTINGS"
                    ;;
        *       )   echo "  ERROR: No background config found" 2>&1
                    exit 1
                    ;;
    esac
}

function bgFeh(){    # get Feh saved backgrounds
    
    FFILE="$CONFIGDIR/.fehbg"
    if [ -f "$FFILE" ];then
        BG=""
        # get fields between single quotes
        for F in $(grep -o "'.*'" $FFILE | sed "s/'//g");do
            BG="$BG$F;\n"
        done
        TXT="Backgrounds set with Feh, using $FEHFILE\n\n$BG"
        echo "Background set with feh:\n\t$BG$F" >> "$LISTMSG"
    else
        echo "  $FFILE not found" 2>&1
    fi
}

function getNitrogen(){  # get Nitrogen saved backgrounds
    
    NFILE="$CONFIGDIR/bg-saved.cfg"
    if [ -f "$NFILE" ];then
        BG=""
        while read line;do
            BGLINE=$(echo $line | awk -F"file=" '{print $2}')
            if [[ $BGLINE ]];then
                BG="$BG$BGLINE;\n"
            fi
        done < "$NFILE"
        TXT="Backgrounds set with Nitrogen, using $NITROFILE\n\n$BG"
        echo "Background set with nitrogen:\n\t$BG" >> "$LISTMSG"
    else
        echo "  $NFILE not found" 2>&1
    fi
}

function getConky(){
    
    if [ "$(pidof conky)" ];then
        MSG="Use running conkys?\nIf 'No', then the default conkyrc will be used"
        DLG=$($DIALOG --form \
                --button="No:1" $OK \
                --image="dialog-question" \
                "$T$MSG" \
                --width=300 \
                )
        if [[ $? = 0 ]];then
            echo "  Using running conkys"
            conkyRunning
            writeConkys
        else # Choice is "No", so use default conky
            writeDefConky
        fi
    else    # No conkys running, use default
        writeDefConky
    fi
}

function conkyRunning(){    # find running conkys
    
    > "$TEMPFILE" # make blank tempfile, to save running conky paths
    pgrep -a conky | while read pid cmd;do
        if [[ ${cmd%% *} = conky ]];then
            if [[ $cmd = "conky -q" ]];then   # conky -q was used
                echo "$cmd;" >> "$TEMPFILE"
            else
                CPATH=$(echo "$cmd" | awk '{print $NF}')
                echo "$CPATH;" >> "$TEMPFILE"
            fi
        fi
    done
}

function writeDefConky(){ # write default conky to saved-themes.txt and settings.cfg
    
    echo "  Using default conky"
    echo "[CONKY] conky -q & sleep 1s;" >> "$SETTINGS"
    echo "Default Conky" >> "$LISTMSG"
}

function writeConkys(){  # save conky names to saved-themes.txt and settings.cfg
    
    TXT="Conkys:\n\n"
    DEF="Default\n"
    MSG="Running Conkys:  "
    CONKYCMD=""
    LISTMSGTXT=""
    while read line;do
        LINE=$(echo "$line" | sed 's/;//')
        # test if default conky was used
        if [[ $LINE = "conky -q" ]];then
            CONKYCMD="$CONKYCMD conky -q & sleep 1s;"
            TXT="$TXT$DEF"
            LISTMSGTXT="Default Conky"
        else
            CONKYCMD="$CONKYCMD conky -c $LINE & sleep 1s;"
            TXT="$TXT$line\n"
            LISTMSGTXT="$LISTMSGTXT\n\t$line"
        fi
    done < "$TEMPFILE"
    echo "[CONKY] $CONKYCMD" >> "$SETTINGS"
    rm "$TEMPFILE"
    echo "$MSG$LISTMSGTXT" >> "$LISTMSG"
}

function checkConkyzen(){    # see if bl-conkyzen and session file present
    
    if type bl-conkyzen &>/dev/null;then
        if [ -f $CONKYSESSION ]; then
            CZEN=1  # set flag for Restore choice
        fi
    fi
}

function getTint(){
    
    if [ "$(pidof tint2)" ];then
        MSG="Use running Tint2?\nIf 'No', then the default tint2rc will be used"
        DLG=$($DIALOG --form \
                --button="No:1" $OK \
                $IMG"dialog-question" \
                "$T$MSG" \
                --width=300 \
                )
        if [[ $? = 0 ]];then
            echo "  Using running tint2s"
            tintRunning
            writeTint2s
        else # Choice is "No", so use default tint2
            writeDefTint2
        fi
    fi
}

function tintRunning(){
    
    > "$TEMPFILE" # make blank tempfile, to save running tint2 paths
    pgrep -a tint2 | while read pid cmd;do
        if [[ ${cmd%% *} = tint2 ]];then
            TPATH=$(echo "$cmd" | awk '{print $NF}')
            echo "$TPATH;" >> "$TEMPFILE"
        fi
    done
}

function writeTint2s(){  # save tint2 names to saved-themes.txt and settings.cfg
    
    TXT="Tint2s:\n\n"
    MSG="Running Tint2s:  "
    TINTCMD=""
    LISTMSGTXT=""
    while read line;do
        TXT="$TXT$line\n"
        LINE=$(echo "$line" | sed 's/;//')
        if [[ $LINE = tint2 ]];then # default command was used
            TINTCMD="$TINTCMD$LINE;"
            LISTMSGTXT="Default Tint2"
        else
            TINTCMD="$TINTCMD$LINE;"
            LISTMSGTXT="$LISTMSGTXT\n\t$LINE"
        fi
    done < "$TEMPFILE"
    echo "[TINT2] $TINTCMD" >> "$SETTINGS"
    rm "$TEMPFILE"
    echo "$MSG$LISTMSGTXT" >> "$LISTMSG"
}

function writeDefTint2(){ # write default tint2 to saved-themes.txt and settings.cfg
    
    TTXT="Tint2s:\n\nDefault tint2rc\n$DASHES"
    echo "  Using default tint2"
    echo "[TINT2] $HOME/.config/tint2/tint2rc;" >> "$SETTINGS"
    echo "Default Tint2" >> "$LISTMSG"
}

function killTints(){
    
    pgrep -a tint2 | while read pid cmd; do 
        if [[ ${cmd%% *} = tint2 ]]; then
            kill "$pid"
        fi     
    done
}

function checkTint2zen(){    # see if bl-tint2zen and session file present
    
    if type bl-tint2zen &>/dev/null;then
        if [ -f $TINTSESSION ]; then
            TZEN=1  # set flag for Restore choice
        fi
    fi
}

function getOBtheme(){   # copy <theme> section from rc.xml to obtheme.txt
    
    RCFILE="$OBPATH/rc.xml"
    tag="theme"
    sed -n "/<$tag>/,/<\/$tag>/p" "$RCFILE" > "$CONFIGDIR/obtheme.txt"
    echo "[OBTHEME]" >> "$SETTINGS"
    getOBname
}

function getOBname(){    # get OB theme name
    
    OBFILE="$CONFIGDIR/obtheme.txt"
    OBTHEME=$(awk 'NR==2 {print;exit}' $OBFILE | awk -F'[>|<]' '{print $3}')
    TXT="Openbox theme:  $OBTHEME\n"
    echo "  Saved Openbox theme: $OBTHEME"
    echo "Openbox theme: $OBTHEME" >> "$LISTMSG"
}

function getGTKtheme(){
    
    GTKTHEMES=( "$GTK2" "$GTK2MINE" "$GTK3" "$GTK3x" )
    for f in "${GTKTHEMES[@]}";do
        if [ -f "$f" ];then
            cp "$f" "$CONFIGDIR"
        elif [ -d "$f" ];then
            cp -r "$f" "$CONFIGDIR"
        fi
    done
    echo "[GTK]" >> "$SETTINGS"
    getGTKname
}

function getGTKname(){   # get GTK theme name
    
    GTKFILE="$CONFIGDIR/.gtkrc-2.0"
    while read line;do
        if [ $(echo $line | grep "gtk-theme-name" ) ];then
            GTKTHEME=$(echo $line | awk -F '"' '{print $2}')
        fi
    done < $GTKFILE
    TXT="GTK theme:  $GTKTHEME\n"
    echo "  Saved GTK theme: $GTKTHEME"
    echo "GTK theme: $GTKTHEME" >> "$LISTMSG"
}

function getDmenu(){
    
    if [[ -e $DPATH ]];then
        cp "$DPATH" "$CONFIGDIR"
        echo "[DMENU]" >> "$SETTINGS"
        TXT="dmenu config:  $DPATH\n"
        echo "  Saved dmenu config: $DPATH"
        echo "dmenu settings" >> "$LISTMSG"
    else
        echo "  $DPATH not found"
    fi
}

function getLightdm(){
    
    if [ -e "$LDM" ];then
        cp "$LDM" "$CONFIGDIR"
        echo "  Saved Lightdm config: $LDM"
        echo "[LIGHTDM]" >> "$SETTINGS"
        TXT="Lightdm config:  $LDM\n"
        echo "LightDM settings" >> "$LISTMSG"
    fi
}

function ShowRootMenu(){ # Display root menu for screenshot
    
    # Set mouse position, for appearance of root-menu
    screenW=$(xrandr -q | awk '/Screen/ {print $8}')
    screenH=$(xrandr -q | awk '/Screen/ {print $10}')
    screenH=${screenH%,}    
    posX=$((screenW / 4 ))
    posY=$((screenH / 5 ))
    
    xdotool mousemove --sync $posX $posY 
    
    # display "Menu -> Preferences" as an example
    xdotool $MOUSECMD \
    key Down key Down key Down key Down key Down key Down \
    key Down key Down key Down key Down key Down key Down \
    key Down key Down && sleep 0.1
    
    xdotool key Right && sleep 0.2 
}

function getScrot(){            # Get screenshot & create thumbnail
    
    TMPSCROT="$CONFIGPATH/tmpscrot.tmp"
    IMGFULL="$CONFIGPATH/$ANS" # NB 'scrot' is sensitive to quoting
    IMGTHUMB="$CONFIGDIR/$ANS"
    
    # get current desktop number
    CURRDTOP=$(xprop -root _NET_CURRENT_DESKTOP | tail -c -2)
    wmctrl -l -x > "$TMPSCROT"      # store window list in tempfile
    wmctrl -k on                    # hide windows, show desktop

    # show any conkys which have been hidden by wmctrl, (ie not own_window_type desktop)
    for CONK in $(xdotool search --sync --classname "Conky");do 
        xdotool windowactivate "$CONK" 
    done
    ShowRootMenu    # display root menu for the scrot
    
    if type convert &>/dev/null;then    # imagemagick is installed
        sleep 0.5 && scrot "$IMGFULL.jpg"
        convert "$IMGFULL.jpg" -resize 200  "$IMGTHUMB-th.jpg"    # reduce image size
    else
        sleep 0.5 && scrot "$IMGFULL.jpg"
    fi
    # close root menu
    xdotool mousemove_relative --sync --polar 0 10 $MOUSECMD
    
    while read line; do
        WINDOW=$(echo $line | awk '{print $1}') # Window_ID is first field
        DTOP=$(echo $line | awk '{print $2}' )  # Desktop number is second field
        if [[ $DTOP = $CURRDTOP ]];then
            xdotool windowactivate "$WINDOW" 
        fi
    done < "$TMPSCROT"
    rm "$TMPSCROT"
    
    echo "  Screenshot saved as: $CONFIGPATH/$ANS.jpg"
    echo "  Screenshot thumbnail saved as: $IMGTHUMB-th.jpg"
}

function restoreGTK(){   # $1 is chosen saved config dir
    
    GTKPATHS=( "$HOME" "$HOME" "$GTK3" "$GTK3x" )
    GTKSAVED=( "$1/$GTK2" "$1/$GTK2MINE" "$1/gtk-3.0" "$1/xfce4-notifyd.xml" )
    i=0
    for f in ${GTKSAVED[@]};do
        if [ -e "$f" ];then     # if destination exists
            if [ -e "${GTKPATHS[i]}" ];then
                if [[ ${GTKSAVED[i]} = "$1/gtk-3.0" ]];then
                    cp -r ${GTKSAVED[i]}/* ${GTKPATHS[i]} # restore contents of gtk-3.0
                fi
                cp ${GTKSAVED[i]} ${GTKPATHS[i]}
                echo "  Restored: ${GTKSAVED[i]}"
            else
                echo "  Restore path ${GTKPATHS[i]} not found" 2>&1
            fi
        else
            echo "  ${GTKSAVED[i]} not found" 2>&1
        fi
        i=$(($i+1))
    done
}

function restoreOBrc(){
    
    RCFILE="$OBPATH/rc.xml" 
    THEMEFILE="$1/obtheme.txt"
    FTEMP="$1/temp.txt"

    if [[ $(grep "[OBTHEME]" "$1/settings.cfg" ) ]];then
        # backup rc.xml first
        NOW=$(date +"%Y%m%d-%H%M")
        RCBKP="$RCFILE.$NOW"
        cp "$RCFILE" "$RCBKP"
        
        ## put placeholder in place of <theme> section, write to tempfile
        sed -n "/<theme>/{:a;N;/<\/theme>/!ba;N;s/.*\n/THEMESECTION\n/};p" "$RCFILE" > $FTEMP
        # replace placeholder from theme file
        sed -i "/THEMESECTION/{
            s/THEMESECTION//g
            r $THEMEFILE
        }" $FTEMP
        sed -i '/^$/d' $FTEMP   # remove empty lines
        cp $FTEMP "$RCFILE"     # overwrite rc.xml
        echo "  rc.xml backed up and edited for OB theme"
        rm $FTEMP
    fi
}

function restoreTint2(){
    
    echo "TINTCMD= $1"
    echo "$1" | awk -F';' '{for(i=1; i<=NF; i++) print $i}' >> "$TINTSESSION" # write to tint2 session file
    killTints
    while read tintline;do
        tint2 -c "$tintline" &
        sleep 1s
    done < "$TINTSESSION"
    # flag to restart compton, in case user has issues with rendering tint2
    TFLAG=1
}

function restoreDmenu(){
    
    DFILE="$1"
    if [[ -e $DPATH ]];then        # backup dmenu-bind.sh first
        DMENUBKP="$DPATH.bkp"
        cp "$DPATH" "$DMENUBKP"
        echo -e "\n  $DPATH backed up and restored"
    else
        cp "$DFILE" "$DPATH"
        echo -e "\n  $DPATH restored"
    fi
}

function restoreLightdm(){   # need sudo to restore lightdm-gtk-greeter.conf
    
    CMD="cp $1 $LDM"
    TXT="Authenticate restore of lightdm-gtk-greeter.conf"
    LOOP=1
    while [[ $LOOP ]];do
        gksudo -m "$TXT" "$CMD"
        DLG=$?
        case "$DLG" in
            0   )   MSG="  Restored: lightdm-gtk-greeter.conf"
                    echo -e "\n$MSG"
                    break
                    ;;
            255 )   MSG="  Authentication cancelled\n\nlightdm-gtk-greeter.conf was not restored"
                    echo -e "\n$MSG" 2>&1
                    break
                    ;;
            *   )   MSG="  Password input failed\n\nlightdm-gtk-greeter.conf was not restored"
                    echo -e "\n$MSG" 2>&1
                    "$DIALOG" --image="dialog-warning" "$T$MSG" "$OK"
                    ;;
        esac
    done
}

function cleanup(){
    
    if [ -d "$CONFIGDIR" ];then
        rm -rf "$CONFIGDIR"
    fi
    if [ -d "$CONFIGDIR-BKP" ];then
        mv {"$CONFIGDIR-BKP","$CONFIGDIR"}
    fi
    echo -e "\n  Cancelled\n..Temporary $CONFIGDIR deleted\n"
    exit 0
}

function saveSettings(){
    
    COLUMNS=(\
        "FALSE" "$PICKOB" \
        "FALSE" "$PICKGTK" \
        "FALSE" "$PICKCONKY" \
        "FALSE" "$PICKTINT" \
        "FALSE" "$PICKBG" \
        "FALSE" "$PICKDMENU" \
        "FALSE" "$PICKLDM" \
        )
    SLOOP=1
    while [[ $SLOOP = 1 ]];do
        CHOICE=$($DIALOG --list --checklist --title \
            --text="Choose the configs you want to save..." \
            $CANCEL $OK \
            --width=340 --height=310 \
            --column="Select" --column="Config" "${COLUMNS[@]}" \
            )
    
        if [[ $? = 1 ]]; then # cancel button pressed
            cleanup
        else
            if [[ ! $CHOICE ]] ; then # entry field is empty, so try again
                RET=$($DIALOG  --image="dialog-question" \
                --text="\n  Make a selection...." \
                $EXIT $OK \
                --width=300 \
                )
                if [[ $? = 1 ]];then
                    cleanup
                fi
            else
                i=0
                OIFS=$IFS # save Internal Field Separator
                IFS=$"|" # separator is "|" in returned choices
                # dialog return is in format 'TRUE|value|\nTRUE|value'
                for ret in $CHOICE; do
                    if [[ $(echo $ret | grep TRUE) ]];then 
                        continue
                    fi
                    retChoice[$i]="$ret"
                    i=$(($i+1))
                done
                IFS=$OIFS # reset IFS back to default
                len=${#retChoice[@]}
                for (( i=0; i<${len}; i++ ));do
                    item="${retChoice[$i-1]}"
                    case "$item" in
                        "$PICKOB"   )   getOBtheme
                                        ;;
                        "$PICKGTK"  )   getGTKtheme
                                        ;;
                        "$PICKCONKY")   getConky
                                        ;;
                        "$PICKTINT" )   getTint
                                        ;;
                        "$PICKBG"   )   getBg
                                        ;;
                        "$PICKDMENU")   getDmenu
                                        ;;
                        "$PICKLDM"  )   getLightdm
                                        ;;
                        *           )   echo "  Unknown value!" 2>&1
                                        exit 1
                                        ;;
                    esac
                done
                SLOOP=0
            fi
        fi
    done
    TXT="<big><b><u>Openbox Configurations to be saved:</u></b></big>\n\n"
    TXT2=$(cat $LISTMSG)
    NEW=$($DIALOG --text="$TXT$TXT2")
    if [[ $? = 1 ]];then
        cleanup
    fi
}

function ViewRestoreDialog(){  #   Display saved theme collections
    
    DLGLIST=""
    i=0
    for dir in "$CONFIGPATH"/* ;do
        if [ -d "$dir" ];then
            if [ -e "$dir/settings.cfg" ];then
                dir=$(echo $dir | sed -e 's/ /_/g')    # replace any spaces in dir name
                namesARR[$i]="<big>$(basename $dir)</big>" # add theme collection name to array
                
                IMGTHUMB="None"         # Placeholder if no thumbnail found
                for f in "$dir"/*;do    # add scrot thumb to array
                    if grep image <<< $(file -i $f);then
                        IMGTHUMB="$f"
                        break
                    fi
                done
                thumbsARR[$i]="$IMGTHUMB"

                CONFIGS="\""
                while read line;do
                    CONFIGS="$CONFIGS $line\n"
                done < "$dir/LISTMSG.txt"
                CONFIGS="$CONFIGS\""
                configARR[$i]="$CONFIGS" # add saved configs to array
            fi
            i=$(($i+1))
        fi
    done
    
    for ((j=0; j<${#namesARR[*]}; j++));do
        DLGLIST="$DLGLIST ${namesARR[j]} ${thumbsARR[j]}"
    done
}

function restoreSettings(){

    ViewRestoreDialog
    LOOP=1
    while [[ $LOOP ]] ;do 
        CONFIG=$($DIALOG --list --text="Double-click selection, or \"OK\" to restore settings\n" \
            --width=400 --height=500 --center --image-preview \
            --expand-column=2 \
            --column="Saved Configuration":TEXT \
            --column="SCROT":IMG \
            $DLGLIST \
            )
        RET=$?
        if [[ $RET = 1 ]];then    # Cancel
            exit 0
        fi
        if [[ $CONFIG ]];then
            DIR=$(echo "$CONFIG" | awk -F'[>|<]' '{print $3}' )
            FPATH="$CONFIGPATH/$DIR"
            if [[ $RET = 0 ]];then
                SAVED="$FPATH/LISTMSG.txt"
                TEXT="Restoring Configs saved as <big>$DIR</big>\n\n"
                TEXT="$TEXT$(cat $SAVED)"
                $DIALOG --center "$T$TEXT" "$CANCEL" "$OK"
                
                if [[ $? = 0 ]];then
                    break
                fi
            fi
        fi
    done
    
    SETCFG="$FPATH/settings.cfg"

    # Get chosen saved configs and restore them
    TFLAG=""   # may be needed for compositing issues
    if type bl-compositor &>/dev/null;then
        COMPTON=1
    else
        COMPTON=""
    fi
    
    while read line;do
        TAG=$(echo $line | awk '{print $1}')
        VAL=$(echo $line | awk '{print $2}')
        case "$TAG" in
            "[TINT2]"       )   checkTint2zen # see if bl-tint2zen installed
                                if [[ $TZEN ]];then
                                    > "$TINTSESSION" # overwrite tint2 session file
                                fi
                                TINTCMD=$(echo $line | cut -d ' ' -f2-)
                                restoreTint2 "$TINTCMD"
                                ;;
            "[CONKY]"       )   checkConkyzen # see if bl-conkyzen installed
                                if [[ $CZEN ]];then
                                    > "$CONKYSESSION" # overwrite conky session file
                                fi
                                CONKYCMD=$(echo $line | cut -d ' ' -f2-)
                                echo $CONKYCMD | awk -F';' '{for(i=1; i<=NF; i++) print $i}' >> "$CONKYSESSION" # write to conky session file
                                killall conky; source "$CONKYSESSION"
                                ;;
            "[GTK]"         )   restoreGTK "$FPATH"
                                ;;
            "[OBTHEME]"     )   restoreOBrc "$FPATH"
                                ;;
            "[BACKGROUND]"  )   if [[ $VAL = "FEH" ]];then
                                    cp "$FPATH/.fehbg" "$HOME"
                                    eval $(cat ~/.fehbg)
                                else
                                    cp "$FPATH/bg-saved.cfg" "$NITRODIR"
                                    (sleep 1s && nitrogen --restore ) &
                                fi
                                ;;
            "[DMENU]"       )   restoreDmenu "$FPATH/dmenu-bind.sh"
                                ;;
            "[LIGHTDM]"     )   restoreLightdm "$FPATH/lightdm-gtk-greeter.conf"
                                ;;
            *               )   echo "  Unknown value!" 2>&1
                                exit 1
                                ;;
        esac
    done < "$SETCFG"
}

function reloadGTK(){ # reload gtk theme after restoring saved config
    
python - <<END
import gtk

events=gtk.gdk.Event(gtk.gdk.CLIENT_EVENT)
data=gtk.gdk.atom_intern("_GTK_READ_RCFILES", False)
events.data_format=8
events.send_event=True
events.message_type=data
events.send_clientmessage_toall()
    
END
}

### END FUNCTIONS ######################################################

# test for blobthemes config directory, create if it doesn't exist
mkdir -p "$CONFIGPATH"

# Choose Save or Restore
INTRO=$(
    $DIALOG $IMG$IMGPATH \
    "$T$TXTINTRO" \
    --button="Save:0" \
    --button="Restore:2" \
    $CANCEL \
    --borders=30 \
    )
RET=$?
case $RET in
    0)  setName
        saveSettings
        getScrot
        if [ -d "$CONFIGDIR-BKP" ];then
            rm -rf "$CONFIGDIR-BKP"
            echo -e "Temporary $CONFIGDIR deleted\n"
        fi
    
        ;;
    1)  echo "CANCEL..."
        exit 0
        ;;
    2)  restoreSettings
        openbox --reconfigure 
        reloadGTK
        if [[ $TFLAG = 1 ]] && [[ $COMPTON = 1 ]];then
            echo -e "\n  Restarting compton..."
            bl-compositor --restart &
        fi
        ;;
    *)  echo "RETURN ERROR" 2>&1
        ;;
esac

exit 0
